# -*- coding: UTF-8 -*-
# @author  : M_Xie
# @date    : 2022/10/3/0003 10:37:21

# def test():
#     print(3 ** 2)
#     print(3 ** 2)
#     print(3 ** 2)
#
#
# def test1(num):
#     print(num ** 2)
#     print(num ** 2)
#     print(num ** 2)


# test()
# test1(num=1)
# test1(2)

# def mysum(num1, num2):
#     print(num1, num2)
#     return num1 + num2
#
# print(mysum(2, 5))
# print(mysum(num2=5, num1=2))

# def myfun(num1, num2, num3):
def myfun(*t):
#     # print(num1 + num2 * num3)
    print(t, type(t))
    res = 0
    for v in t:
        print(v)
        res += v
    print(res)



# myfun((1, 2, 3, 4, 5))
myfun(1, 2, 3, 4, 5)


def myfun(**dic):
    # print(num1 + num2 * num3)
    print(dic, type(dic))


myfun(name="zhangsan", age=12)

'''
函数定义方式一:
def 函数名(形式参数名列表):
    代码块

函数调用:
方式一:
函数名(实际参数列表)
实际参数列表的参数与形式参数的列表一一对应
此时的参数列表可以写一个类似元组去掉括号，例如 函数名(参数1, 参数2, 参数3, 参数4, 参数5,...)

方式二:
函数名(实际参数名=参数的值,...)   也可叫关键字参数：键值对
实际参数列表的参数与形式参数的列表不需要位置上一一对应，只需要参数名对应即可，例如mysum(num2=5, num1=2)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
函数定义方式二: *args代表的接收一个元组
def 函数名(*形式参数名)
    代码块
    
函数调用:
函数名(实际参数列表)
实际参数列表的参数与形式参数的列表一一对应
此时的参数列表可以写一个元组，此时元组括号必须省略 ，例如 函数名(参数1, 参数2, 参数3, 参数4, 参数5)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
函数定义方式三: **args代表的接收一个字典
def 函数名(**形式参数名)
    代码块
    
函数调用:
方式一:
函数名(实际参数列表)
实际参数列表的参数与形式参数的列表一一对应
此时的参数列表是类似字典，此时字典{}必须省略，冒号用等号代替，参数名称没有引号，例如 函数名(参数名称1=参数1, 参数名称2=参数2, 参数名称3=参数3, ...)
'''
