# -*- coding: UTF-8 -*-
# @author  : M_Xie
# @date    : 2022/10/4/0004 23:15:15

class Animal:
    __x = 10

    def test(self):
        print(Animal.__x)
        print(self.__x)

    pass


class Dog(Animal):
    def test2(self):
        print(Dog.__x)
        print(self.__x)
    pass


# 测试代码
a = Animal()
# a.test()

d = Dog()
# d.test2()

# print(Animal.__x)
# print(Dog.__x)
#
# print(a.__x)
# print(d.__x)

print(Animal.__dict__)
print(Animal._Animal__x)
# tt = 666
# __all__ = ["_tt"]
# _tt = 666
__all__ = ["__tt"]
__tt = 666
'''
私有化属性
概念
    是指将一些原本公开的属性设置权限, 只能小范围访问, 其他地方访问不了
意义
    保证数据的安全性
    提高代码的可维护性
* 注意
    Python并没有真正的私有化支持，但是, 可以使用下划线完成伪私有的效果
    类属性(方法)和实例属性(方法)遵循相同的规则
x
公有属性
    类内部访问
    子类内部访问
    模块内其他位置访问
        类访问
            父类
            派生类(继承的类)
        实例访问
            父类实例
            派生类实例
    跨模块访问
        import形式导入
        from 模块 import * 形式导入
_y
    受保护属性
        类内部访问
        子类内部访问
        模块内其他位置访问(有警告，但是可以访问)
            类访问
                父类
                派生类
            实例访问
                父类实例
                派生类实例
        跨模块访问
            import形式导入(有警告，但是可以访问)
            from module import * 形式导入
                * 有__all__指明对应变量(提前使用__all__ = ["_y"]，可以访问，不警告)
                * 没有__all__指明对应变量(报错,不能访问)
__z
    私有属性
        类内部访问
        子类内部访问(报错,不能访问)
        模块内其他位置访问(报错,不能访问)
            类访问
                父类
                派生类
            实例访问
                父类实例
                派生类实例
        跨模块访问(属性报错,不能访问,模块可以按照下面方案访问)
            import形式导入(可以访问)
            from module import * 形式导入
                * 有__all__指明对应变量(提前使用__all__ = ["_y"]，可以访问，不警告)
                * 没有__all__指明对应变量(报错,不能访问)
    私有属性的实现机制
        名字重整(Name Mangling)
            重改__x为另外一个名称, 如
                _类名__x
        目的
            防止外界直接访问
            防止被子类同名称属性覆盖
    应用场景
        数据保护
        数据过滤
补充
    xx_
        "变量名_" 这个格式是为了与系统属性作区分
    __xx__
        两端__一般为系统内置属性或方法, 所以以后命名注意避免
'''

